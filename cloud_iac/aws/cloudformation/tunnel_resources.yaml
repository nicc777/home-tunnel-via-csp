---
AWSTemplateFormatVersion: '2010-09-09'

Description: "IaC for https://github.com/nicc777/home-tunnel-via-csp"

#######################################################################################################################
###
###     PARAMETERS
###
#######################################################################################################################

Parameters:

  ArtifactBucketNameParam:
    Type: 'String'
    MinLength: 1

  CumulusTunnelCommanderS3KeyParam:
    Type: 'String'
    MinLength: 1
    Default: "handler_cumulus_tunnel_commander.zip"

  CumulusTunnelApiAuthorizerS3KeyParam:
    Type: 'String'
    MinLength: 1
    Default: "handler_cumulus_tunnel_authorizer.zip"

  CumulusTunnelGetStackStatusS3KeyParam:
    Type: 'String'
    MinLength: 1
    Default: "handler_cumulus_tunnel_cfn_stack_status.zip"

  VpcId1Param:
    Type: 'String'
    MinLength: 1

  VpcCidrParam:
    Type: 'String'
    MinLength: 1

  SubnetId1Param:
    Type: 'String'
    MinLength: 1

  SubnetId2Param:
    Type: 'String'
    MinLength: 1

  SubnetId3Param:
    Type: 'String'
    MinLength: 1

  DebugParam:
    Type: 'String'
    Default: "0"
    Description: "To enable DEBUG logging for AWS Lambda function, set this value to 1"


#######################################################################################################################
###
###     RESOURCES
###
#######################################################################################################################

Resources:

  ########################################
  ###
  ### API GATEWAY - REST API
  ###
  ########################################

  # Original source for the API gateway example: https://gist.github.com/carceneaux/7a5ef7439a7dc514b8da61fe929df5cavvvvvvv

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      Description: !Sub API for the ${AWS::StackName} CloudFormation stack.
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub ${AWS::StackName}-api-key
      Description: API Key V1
      Enabled: true
      GenerateDistinctId: false
      # Usage: # curl -d "key1=value1&key2=value2" --header "x-api-key: abc123" -X POST https://12abcde45.execute-api.us-west-1.amazonaws.com/prod/create
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages: 
      - ApiId: !Ref ApiGateway
        Stage: !Ref ApiStage     
      Description: !Sub ${AWS::StackName} usage plan
      Quota:
        Limit: 2000
        Period: MONTH
      Throttle:
        BurstLimit: 10
        RateLimit: 10
      UsagePlanName: !Sub ${AWS::StackName}-usage-plan
  ApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan
  ApiStageLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: ApiGateway
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - "/aws/apigateway/"
          - Ref: ApiGateway
          - "/command"
      RetentionInDays: 7
  ApiStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: ApiStageLogGroup
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiStageLogGroup.Arn
        # See https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-logging-variables.html
        Format: "$context.requestId $context.requestTime $context.status $context.identity.sourceIp $context.authorizer.principalId $context.identity.userAgent $context.integration.latency $context.integration.status $context.integration.integrationStatus $context.integrationErrorMessage"
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref ApiGateway
      StageName: cumulus-tunnel
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - ApiProxyResourceCommanderPOST
    Properties:
      RestApiId: !Ref ApiGateway

  ###
  ### Commander Path and Handler
  ###
  ApiProxyResourceCommander:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: command
  ApiProxyResourceCommanderPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiProxyResourceCommander
      HttpMethod: POST  
      ApiKeyRequired: true    
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CumulusTunnelCommanderFunction.Arn}/invocations
  ApiProxyResourceOptionsCommander:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiProxyResourceCommander
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-cumulus-tunnel-credentials'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  
  ###
  ### Stack Status Path and Handler
  ###
  ApiProxyResourceStackStatus:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: status
  ApiProxyResourceStackStatusPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiProxyResourceStackStatus
      HttpMethod: POST  
      ApiKeyRequired: true    
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CumulusTunnelStackStatusFunction.Arn}/invocations
  ApiProxyResourceOptionsStackStatus:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiProxyResourceStackStatus
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-cumulus-tunnel-credentials'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # Authorizer
  ApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub ${AWS::StackName}-LambdaAuthorizer
      RestApiId: !Ref ApiGateway
      Type: REQUEST
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthorizer.Arn}/invocations
      AuthorizerResultTtlInSeconds: 0
      IdentitySource: 'method.request.header.x-cumulus-tunnel-credentials, method.request.header.origin'

  # Lambda Configuration
  CumulusTunnelStackStatusLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: CumulusTunnelStackStatusFunction
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - "/aws/lambda/"
          - Ref: CumulusTunnelStackStatusFunction
      RetentionInDays: 7

  CumulusTunnelStackStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Code:
        S3Bucket: !Ref ArtifactBucketNameParam
        S3Key: !Ref CumulusTunnelGetStackStatusS3KeyParam
      Role: !GetAtt ApiGwLambdaRole.Arn
      Handler: handler_cumulus_tunnel_cfn_stack_status.handler
      FunctionName: cumulus-tunnel-get-stack-status
      Description: Retrieve the status of a cloudformation stack
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          DEBUG: !Ref DebugParam

  CumulusTunnelCommanderLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: CumulusTunnelCommanderFunction
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - "/aws/lambda/"
          - Ref: CumulusTunnelCommanderFunction
      RetentionInDays: 7

  CumulusTunnelCommanderFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Code:
        S3Bucket: !Ref ArtifactBucketNameParam
        S3Key: !Ref CumulusTunnelCommanderS3KeyParam
      Role: !GetAtt ApiGwLambdaRole.Arn
      Handler: handler_cumulus_tunnel_commander.lambda_handler
      FunctionName: cumulus-tunnel-commander
      Description: Process the Cumulus Tunnel command
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          DEBUG: !Ref DebugParam
  
  LambdaAuthorizerLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: LambdaAuthorizer
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - "/aws/lambda/"
          - Ref: LambdaAuthorizer
      RetentionInDays: 7

  LambdaAuthorizer:
    Type: AWS::Lambda::Function
    DependsOn: CumulusTunnelAuthTokenSecret
    Properties:
      Runtime: python3.12
      Code:
        S3Bucket: !Ref ArtifactBucketNameParam
        S3Key: !Ref CumulusTunnelApiAuthorizerS3KeyParam
      Role: !GetAtt LambdaAuthorizerIAMRole.Arn
      Handler: handler_cumulus_tunnel_authorizer.lambda_handler
      FunctionName: !Sub ${AWS::StackName}-authorizer
      Description: API Gateway custom authorizer - Validates incoming source has required permissions to make API request.
      MemorySize: 256
      Timeout: 5
      Environment:
        Variables:
          DEBUG: !Ref DebugParam
          SECRET_ARN: !Ref CumulusTunnelAuthTokenSecret
  
  # Permissions Configuration
  ApiGwLambdaRole:
    Type: AWS::IAM::Role
    DependsOn: CumulusTunnelDynamodbTable
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
        - Effect: Allow
          Principal: 
            Service: 
            - lambda.amazonaws.com
          Action: 
          - sts:AssumeRole
      Policies:  
      - PolicyName: !Sub ${AWS::StackName}-logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: !Sub ${AWS::StackName}-sqs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:GetQueueUrl
            - sqs:SendMessage
            Resource: "*"
      - PolicyName: !Sub ${AWS::StackName}-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Scan
            Resource: !GetAtt CumulusTunnelDynamodbTable.Arn
      - PolicyName: !Sub ${AWS::StackName}-cloudformation
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "cloudformation:CancelUpdateStack"
            - "cloudformation:DescribeStackResources"
            - "cloudformation:UpdateStackSet"
            - "cloudformation:CreateChangeSet"
            - "cloudformation:DeleteStackSet"
            - "cloudformation:DeleteChangeSet"
            - "cloudformation:DescribeStacks"
            - "cloudformation:DescribeStackEvents"
            - "cloudformation:DescribeStackSet"
            - "cloudformation:CreateStack"
            - "cloudformation:GetTemplate"
            - "cloudformation:DeleteStack"
            - "cloudformation:DescribeChangeSet"
            - "cloudformation:ExecuteChangeSet"
            - "cloudformation:ListChangeSets"
            - "cloudformation:ListStackResources"
            Resource: 
            - !Sub "arn:aws:cloudformation:*:${AWS::AccountId}:stack/*/*"
            - !Sub "arn:aws:cloudformation:*:${AWS::AccountId}:type/resource/*"
            - !Sub "arn:aws:cloudformation:*:${AWS::AccountId}:stackset-target/*"
            - !Sub "arn:aws:cloudformation:*:${AWS::AccountId}:stackset/*:*"

  LambdaAuthorizerIAMRole: 
    Type: AWS::IAM::Role
    DependsOn: CumulusTunnelAuthTokenSecret
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
        - Effect: Allow
          Principal: 
            Service: 
            - lambda.amazonaws.com
          Action: 
          - sts:AssumeRole
      Policies:  
      - PolicyName: !Sub ${AWS::StackName}-authz-logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: !Sub ${AWS::StackName}-authz-secretsmanager
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 
            - 'secretsmanager:GetSecretValue'
            - 'secretsmanager:DescribeSecret'
            Resource: !Ref CumulusTunnelAuthTokenSecret

  ApiGatewayInvokeCommand:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CumulusTunnelCommanderFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*

  ApiGatewayInvokeStackStatus:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CumulusTunnelStackStatusFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*

  ApiGatewayInvokeAuthorizer:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaAuthorizer.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*

  ApiGatewayLogsIAMRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
        - Effect: Allow
          Principal: 
            Service: 
            - apigateway.amazonaws.com
          Action: 
          - sts:AssumeRole
      Path: /
      Policies: 
        - PolicyName: AmazonAPIGatewayPushToCloudWatchLogs
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutLogEvents
              - logs:GetLogEvents
              - logs:FilterLogEvents
              Resource: '*'

  # API Gateway CloudWatch Logs Initial Configuration
  ApiGatewayLogs:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt ApiGatewayLogsIAMRole.Arn

  ########################################
  ###
  ### CREDENTIALS
  ###
  ########################################

  CumulusTunnelAuthTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: 'The secret for tunnel reverse proxy HTTP reverse proxy'
      GenerateSecretString: 
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: true
        ExcludeUppercase: false
        GenerateStringKey: 'password'
        IncludeSpace: false
        PasswordLength: 64
        RequireEachIncludedType: true
        SecretStringTemplate: '{"username": "cumulus"}'
      Name: !Sub '${AWS::StackName}-tunnel-http-password'


  ########################################
  ###
  ### DYNAMODB
  ###
  ########################################

  CumulusTunnelDynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cumulus-tunnel
      AttributeDefinitions:      
      - AttributeName: "RecordKey"
        AttributeType: "S"
      - AttributeName: "RecordTtl"
        AttributeType: "N"
      KeySchema:
      - AttributeName: "RecordKey"
        KeyType: "HASH"
      - AttributeName: "RecordTtl"
        KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification: 
        AttributeName: RecordTtl
        Enabled: true
      StreamSpecification: 
        StreamViewType: NEW_AND_OLD_IMAGES

  DynamoDBStreamToLambdaRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies: 
      - PolicyName: DynamoDBStreamAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
            Resource: !GetAtt CumulusTunnelDynamodbTable.StreamArn
      - PolicyName: VPCAccessPolicy 
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeNetworkInterfaces
            Resource: '*'
      - PolicyName: SQSAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:GetQueueUrl
            - sqs:SendMessage
            Resource: "*"

  DynamoDbTtlExpirationHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: DynamoDbTtlExpirationHandler
    Properties:
      LogGroupName: 
        Fn::Join:
        - ''
        - - "/aws/lambda/"
          - Ref: DynamoDbTtlExpirationHandler
      RetentionInDays: 7

  DynamoDbTtlExpirationHandler:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: cumulus-tunnel-dynamodb-ttl-handler
      Handler: dynamodb_ttl_expire_event_handler.handler
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Role: !GetAtt DynamoDBStreamToLambdaRole.Arn
      Environment:
        Variables:
          DEBUG: !Ref DebugParam
      VpcConfig: 
        SubnetIds: 
        - !Ref SubnetId1Param
        - !Ref SubnetId2Param
        - !Ref SubnetId3Param
        SecurityGroupIds:
        - !GetAtt DynamoDbTtlExpirationHandlerSG.GroupId
      Code:
        S3Bucket: !Ref ArtifactBucketNameParam
        S3Key: dynamodb_ttl_expire_event_handler.zip

  DynamoDbTtlExpirationHandlerSG: # Security group for Lambda
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable internet access for the Lambda function 
      VpcId: !Ref VpcId1Param
      SecurityGroupIngress: # Allow inbound from VPC (optional, if needed)
      - IpProtocol: -1 # All protocols
        FromPort: 0
        ToPort: 65535
        CidrIp: !Ref VpcCidrParam
      SecurityGroupEgress: # Allow outbound to internet
      - IpProtocol: -1 # All protocols
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  LambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !GetAtt DynamoDbTtlExpirationHandler.Arn
      EventSourceArn: !GetAtt CumulusTunnelDynamodbTable.StreamArn
      StartingPosition: TRIM_HORIZON 
      BatchSize: 1 
      Enabled: true

  ########################################
  ###
  ### EC2 ACCESS VIA SSM
  ###
  ########################################

  CumulusTunnelSsmRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: 'SSM Access'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'

  CumulusTunnelSsmPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'Policy for SSM'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Action:
          - 'ssm:UpdateInstanceInformation'
          - 'ssmmessages:CreateControlChannel'
          - 'ssmmessages:CreateDataChannel'
          - 'ssmmessages:OpenControlChannel'
          - 'ssmmessages:OpenDataChannel'
          Resource: '*'
        - Effect: 'Allow'
          Action:
          - 's3:GetEncryptionConfiguration'
          Resource: '*'
      Roles:
      - !Ref CumulusTunnelSsmRole

  CumulusTunnelSsmInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref CumulusTunnelSsmRole

  CumulusTunnelSsmSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: 'cumulus-tunnel-ssm'
      GroupDescription: 'Allow SSM to reach AWS API'
      VpcId: !Ref VpcId1Param
      SecurityGroupEgress:
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: 'Allow all to HTTPS'


#######################################################################################################################
###
###     OUTPUTS
###
#######################################################################################################################

Outputs:

  ApiUrl:
    Value:
      Fn::Join:
      - ''
      - - 'https://'
        - !Ref ApiGateway
        - '.execute-api.'
        - !Sub ${AWS::Region}
        - '.amazonaws.com/cumulus-tunnel/command'
    Export:
      Name: CumulusTunnelApiUrl

  CumulusTunnelSsmPolicyArn:
    Value: !Ref CumulusTunnelSsmPolicy
    Export:
      Name: 'CumulusTunnelSsmPolicyArn'

  CumulusTunnelSsmSecurityGroupId:
    Value: !Ref CumulusTunnelSsmSecurityGroup
    Export:
      Name: 'CumulusTunnelSsmSecurityGroupId'

  CumulusTunnelAuthTokenSecretArn:
    Value: !Ref CumulusTunnelAuthTokenSecret
    Export:
      Name: 'CumulusTunnelAuthTokenSecretArn'
  
