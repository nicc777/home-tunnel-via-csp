---
AWSTemplateFormatVersion: '2010-09-09'

Description: "IaC for https://github.com/nicc777/home-tunnel-via-csp"

#######################################################################################################################
###
###     PARAMETERS
###
#######################################################################################################################

Parameters:

  CumulusTunnelBucketNameParam:
    Type: 'String'
    MinLength: 1

  ArtifactBucketNameParam:
    Type: 'String'
    MinLength: 1

  LambdaFunctionCreatedS3KeyParam:
    Type: 'String'
    MinLength: 1
    Default: "handler_s3_object_created.zip"

  LambdaFunctionDeletedS3KeyParam:
    Type: 'String'
    MinLength: 1
    Default: "handler_s3_object_deleted.zip"

  LambdaFunctionExpiredS3KeyParam:
    Type: 'String'
    MinLength: 1
    Default: "handler_s3_object_expired.zip"

  VpcId1Param:
    Type: 'String'
    MinLength: 1

  SubnetId1Param:
    Type: 'String'
    MinLength: 1

  SubnetId2Param:
    Type: 'String'
    MinLength: 1

  SubnetId3Param:
    Type: 'String'
    MinLength: 1

  DebugParam:
    Type: 'String'
    Default: "0"
    Description: "To enable DEBUG logging for AWS Lambda function, set this value to 1"

  CumulusTunnelAmiIdParam:
    Type: 'String'
    MinLength: 1
    Description: "The AMI to use."

  StateFileKeyParam:
    Type: 'String'
    MinLength: 1
    Default: "cumulus-tunnel-state.json"

#######################################################################################################################
###
###     RESOURCES
###
#######################################################################################################################

Resources:

  ########################################
  ###
  ### SQS
  ###
  ########################################

  TunnelInstructionQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      MaximumMessageSize: 102400
      MessageRetentionPeriod: 1800
      QueueName: "cumulus-tunnel-commands"
      VisibilityTimeout: 180

  ########################################
  ###
  ### S3 BUCKET
  ###
  ########################################

  CumulusTunnelBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    DependsOn:
    - CumulusTunnelS3ObjCreatedTopic
    - CumulusTunnelS3ObjDeletedTopic
    - CumulusTunnelS3ObjExpiredTopic
    - CumulusTunnelS3ObjCreateSnsPolicy
    - CumulusTunnelS3ObjDeleteSnsPolicy
    - CumulusTunnelS3ObjExpireSnsPolicy
    Properties:
      BucketName: !Ref CumulusTunnelBucketNameParam
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
        - Id: 'ShortTermRule'
          Status: Enabled
          ExpirationInDays: 1
          Prefix: "agent-"
      NotificationConfiguration:
        TopicConfigurations:
        - Topic: !Ref CumulusTunnelS3ObjCreatedTopic
          Event: 's3:ObjectCreated:*'
        - Topic: !Ref CumulusTunnelS3ObjDeletedTopic
          Event: 's3:ObjectRemoved:*'
        - Topic: !Ref CumulusTunnelS3ObjExpiredTopic
          Event: 's3:LifecycleExpiration:*'

  CumulusTunnelBucketPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'Policy for reading CumulusTunnelBucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: 'GeneralAccess'
          Effect: 'Allow'
          Action:
          - "s3:GetBucketLocation"
          - "s3:PutObject"
          - "s3:GetObject"
          - "s3:GetObjectAttributes"
          - "s3:GetObjectTagging"
          - "s3:PutObjectTagging"
          - "s3:DeleteObject"
          - "s3:GetObjectVersion"
          - "s3:ListBucket"
          Resource:
          - !GetAtt CumulusTunnelBucket.Arn
          - Fn::Sub:
            - "arn:aws:s3:::${BucketName}/*"
            - BucketName: !Ref CumulusTunnelBucketNameParam
        - Sid: 'DenyHttpAccess'
          Action:
          - 's3:*'
          Effect: Deny
          Resource:
          - !GetAtt CumulusTunnelBucket.Arn
          - Fn::Sub:
            - "arn:aws:s3:::${BucketName}/*"
            - BucketName: !Ref CumulusTunnelBucketNameParam
          Condition:
            Bool:
              'aws:SecureTransport': false
        - Sid: 'SnsPublishCreateEvent'
          Action:
          - 'sns:Publish'
          Effect: Allow
          Resource:
          - !Ref CumulusTunnelS3ObjCreatedTopic
        - Sid: 'SnsPublishDeleteEvent'
          Action:
          - 'sns:Publish'
          Effect: Allow
          Resource:
          - !Ref CumulusTunnelS3ObjDeletedTopic
        - Sid: 'SnsPublishExpireEvent'
          Action:
          - 'sns:Publish'
          Effect: Allow
          Resource:
          - !Ref CumulusTunnelS3ObjExpiredTopic

  ########################################
  ###
  ### LAMBDA - BASE 
  ###
  ########################################

  CumulusTunnelLambdaRole:
    Type: AWS::IAM::Role
    DependsOn: TunnelInstanceSecurityGroup
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: MattermostAlertSenderLambdaFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          # logging
          - Effect: Allow
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource: arn:aws:logs:*:*:*
          # networkinterface
          - Effect: Allow
            Action:
            - "ec2:DescribeNetworkinterfaces"
            - "ec2:DeleteNetworkinterface"
            - "ec2:Describe*"
            - "ec2:DescribeVpcs"
            - "ec2:DescribeSubnets"
            - "ec2:CreateNetworkinterface"
            Resource: "*"
          # s3
          - Effect: Allow
            Action:
            - "s3:GetObject"
            Resource: "*"


  ########################################
  ###
  ### SNS RESOURCES 
  ###
  ########################################

  CumulusTunnelS3ObjCreatedTopic:
    Type: AWS::SNS::Topic
    DependsOn: CumulusTunnelLambdaRole          # it first create IAM-role than the Lambda-function
    Properties:
      TopicName: "s3-object-created"

  CumulusTunnelS3ObjDeletedTopic:
    Type: AWS::SNS::Topic
    DependsOn: CumulusTunnelLambdaRole          # it first create IAM-role than the Lambda-function
    Properties:
      TopicName: "s3-object-deleted"

  CumulusTunnelS3ObjExpiredTopic:
    Type: AWS::SNS::Topic
    DependsOn: CumulusTunnelLambdaRole          # it first create IAM-role than the Lambda-function
    Properties:
      TopicName: "s3-object-expired"

  CumulusTunnelS3ObjCreateSnsPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
        - Sid: CumulusTunnelPolicy01
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action: sns:Publish
          Resource: !Ref CumulusTunnelS3ObjCreatedTopic
          Condition:
            ArnLike:
              aws:SourceArn: 
                Fn::Sub:
                - "arn:aws:s3:::${BucketName}"
                - BucketName: !Ref CumulusTunnelBucketNameParam
            StringEquals:
              aws:SourceAccount: !Ref AWS::AccountId
      Topics:
      - !Ref CumulusTunnelS3ObjCreatedTopic

  CumulusTunnelS3ObjDeleteSnsPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
        - Sid: CumulusTunnelPolicy01
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action: sns:Publish
          Resource: !Ref CumulusTunnelS3ObjDeletedTopic
          Condition:
            ArnLike:
              aws:SourceArn: 
                Fn::Sub:
                - "arn:aws:s3:::${BucketName}"
                - BucketName: !Ref CumulusTunnelBucketNameParam
            StringEquals:
              aws:SourceAccount: !Ref AWS::AccountId
      Topics:
      - !Ref CumulusTunnelS3ObjDeletedTopic

  CumulusTunnelS3ObjExpireSnsPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
        - Sid: CumulusTunnelPolicy01
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action: sns:Publish
          Resource: !Ref CumulusTunnelS3ObjExpiredTopic
          Condition:
            ArnLike:
              aws:SourceArn: 
                Fn::Sub:
                - "arn:aws:s3:::${BucketName}"
                - BucketName: !Ref CumulusTunnelBucketNameParam
            StringEquals:
              aws:SourceAccount: !Ref AWS::AccountId
      Topics:
      - !Ref CumulusTunnelS3ObjExpiredTopic

  S3ObjCreatedLambdaFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn: S3ObjCreatedLambdaFunction
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt S3ObjCreatedLambdaFunction.Arn
      Principal: sns.amazonaws.com

  S3ObjDeletedLambdaFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn: S3ObjDeletedLambdaFunction
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt S3ObjDeletedLambdaFunction.Arn
      Principal: sns.amazonaws.com

  S3ObjExpiredLambdaFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn: S3ObjExpiredLambdaFunction
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt S3ObjExpiredLambdaFunction.Arn
      Principal: sns.amazonaws.com


  ########################################
  ###
  ### LAMBDA FUNCTION :: OBJECT CREATED
  ###
  ########################################

  S3ObjCreatedLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: S3ObjCreatedLambdaFunction
    Properties:
      LogGroupName: 
        Fn::Join:
        - ''
        - - "/aws/lambda/"
          - Ref: S3ObjCreatedLambdaFunction
      RetentionInDays: 7

  S3ObjCreatedLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: TunnelInstanceSecurityGroup
    Properties:
      Code:
        S3Bucket: !Ref ArtifactBucketNameParam
        S3Key: !Ref LambdaFunctionCreatedS3KeyParam
      Description: "Lambda function to process created files"
      Handler: "handler_s3_object_created.handler"
      MemorySize: 128
      PackageType: Zip
      Role: !GetAtt CumulusTunnelLambdaRole.Arn
      Environment:
        Variables:
          DEBUG: !Ref DebugParam
          TUNNEL_SECURITY_GROUP: !GetAtt TunnelInstanceSecurityGroup.GroupId
          STATE_BUCKET: !Ref CumulusTunnelBucketNameParam
          STATE_FILE_KEY: !Ref StateFileKeyParam
          COMMAND_QUEUE_URL: !Ref TunnelInstructionQueue
      Runtime: python3.12
      Timeout: 300

  S3ObjCreatedSnsTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt S3ObjCreatedLambdaFunction.Arn
      Protocol: 'lambda'
      TopicArn: !GetAtt CumulusTunnelS3ObjCreatedTopic.TopicArn

  ########################################
  ###
  ### LAMBDA FUNCTION :: OBJECT DELETED
  ###
  ########################################

  S3ObjDeletedLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: S3ObjDeletedLambdaFunction
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - "/aws/lambda/"
          - Ref: S3ObjDeletedLambdaFunction
      RetentionInDays: 7

  S3ObjDeletedLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: TunnelInstanceSecurityGroup
    Properties:
      Code:
        S3Bucket: !Ref ArtifactBucketNameParam
        S3Key: !Ref LambdaFunctionDeletedS3KeyParam
      Description: "Lambda function to process deleted files"
      Handler: "handler_s3_object_delete.handler"
      MemorySize: 128
      PackageType: Zip
      Role: !GetAtt CumulusTunnelLambdaRole.Arn
      Environment:
        Variables:
          DEBUG: !Ref DebugParam
          TUNNEL_SECURITY_GROUP: !GetAtt TunnelInstanceSecurityGroup.GroupId
          STATE_BUCKET: !Ref CumulusTunnelBucketNameParam
          STATE_FILE_KEY: !Ref StateFileKeyParam
          COMMAND_QUEUE_URL: !Ref TunnelInstructionQueue
      Runtime: python3.12
      Timeout: 300

  S3ObjDeletedSnsTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt S3ObjDeletedLambdaFunction.Arn
      Protocol: 'lambda'
      TopicArn: !GetAtt CumulusTunnelS3ObjDeletedTopic.TopicArn

  ########################################
  ###
  ### LAMBDA FUNCTION :: OBJECT EXPIRED
  ###
  ########################################

  S3ObjExpiredLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: S3ObjExpiredLambdaFunction
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - "/aws/lambda/"
          - Ref: S3ObjExpiredLambdaFunction
      RetentionInDays: 7

  S3ObjExpiredLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: TunnelInstanceSecurityGroup
    Properties:
      Code:
        S3Bucket: !Ref ArtifactBucketNameParam
        S3Key: !Ref LambdaFunctionExpiredS3KeyParam
      Description: "Lambda function to process expired files"
      Handler: "handler_s3_object_expired.handler"
      MemorySize: 128
      PackageType: Zip
      Role: !GetAtt CumulusTunnelLambdaRole.Arn
      Environment:
        Variables:
          DEBUG: !Ref DebugParam
          TUNNEL_SECURITY_GROUP: !GetAtt TunnelInstanceSecurityGroup.GroupId
          STATE_BUCKET: !Ref CumulusTunnelBucketNameParam
          STATE_FILE_KEY: !Ref StateFileKeyParam
          COMMAND_QUEUE_URL: !Ref TunnelInstructionQueue
      Runtime: python3.12
      Timeout: 300

  S3ObjExpiredSnsTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt S3ObjExpiredLambdaFunction.Arn
      Protocol: 'lambda'
      TopicArn: !GetAtt CumulusTunnelS3ObjExpiredTopic.TopicArn

  ########################################
  ###
  ### SECURITY GROUP (FIREWALL)
  ###
  ########################################

  TunnelInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the EC2 Instance hosting the tunnels
      VpcId: !Ref VpcId1Param
      GroupName: cumulus-tunnel-instance-sg

  TunnelInstanceSgIpv4Egress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt TunnelInstanceSecurityGroup.GroupId
      IpProtocol: "-1"

  TunnelInstanceSgIpv6Egress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIpv6: "::/0"
      GroupId: !GetAtt TunnelInstanceSecurityGroup.GroupId
      IpProtocol: "-1"

  ########################################
  ###
  ### EC2 ACCESS VIA ECM
  ###
  ########################################

  CumulusTunnelSsmRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: 'SSM Access'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'

  CumulusTunnelSsmPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'Policy for SSM'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Action:
          - 'ssm:UpdateInstanceInformation'
          - 'ssmmessages:CreateControlChannel'
          - 'ssmmessages:CreateDataChannel'
          - 'ssmmessages:OpenControlChannel'
          - 'ssmmessages:OpenDataChannel'
          Resource: '*'
        - Effect: 'Allow'
          Action:
          - 's3:GetEncryptionConfiguration'
          Resource: '*'
      Roles:
      - !Ref CumulusTunnelSsmRole

  CumulusTunnelSsmInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref CumulusTunnelSsmRole

  CumulusTunnelSsmSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: 'cumulus-tunnel-ssm'
      GroupDescription: 'Allow SSM to reach AWS API'
      VpcId: !Ref VpcId1Param
      SecurityGroupEgress:
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: 'Allow all to HTTPS'

  ########################################
  ###
  ### EC2 TUNNEL INSTANCE LAUNCH TEMPLATE
  ###
  ########################################

  CumulusTunnelAuthTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: 'The secret for tunnel reverse proxy HTTP reverse proxy'
      GenerateSecretString: 
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: true
        ExcludeUppercase: false
        GenerateStringKey: 'password'
        IncludeSpace: false
        PasswordLength: 64
        RequireEachIncludedType: true
        SecretStringTemplate: '{"username": "cumulus"}'
      Name: !Sub '${AWS::StackName}-tunnel-http-password'

  CumulusTunnelInstanceRole1:
    Type: 'AWS::IAM::Role'
    DependsOn: CumulusTunnelAuthTokenSecret
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Sid: CumulusTunnelAllowStsAssumeRole
          Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - !Ref CumulusTunnelSsmPolicy
      Policies:
      - PolicyName: 'Ec2SecretsManager01'
        PolicyDocument:
          Version: '2012-10-17'
          Statement: 
          - Action: 
            - 'secretsmanager:GetSecretValue'
            - 'secretsmanager:DescribeSecret'
            Effect: 'Allow'
            Resource: !Ref CumulusTunnelAuthTokenSecret
      - PolicyName: 'ArtifactBucketPolicy01'
        PolicyDocument:
          Version: '2012-10-17'
          Statement: 
          - Action: 
            - 's3:HeadObject'
            - 's3:GetObject'
            - 's3:ListObjectsV2'
            - 's3:CopyObject'
            Effect: 'Allow'
            Resource: 
              Fn::Sub: 
              - 'arn:aws:s3:::${Bucket}/*'
              - Bucket: !Ref ArtifactBucketNameParam
      Path: /
      RoleName: !Sub '${AWS::StackName}-CumulusTunnelInstanceRole1'

  CumulusTunnelProfile: 
    Type: 'AWS::IAM::InstanceProfile'
    Properties: 
      Path: '/'
      Roles: 
      - Ref: CumulusTunnelInstanceRole1

  InstanceHostLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    DependsOn:
    - CumulusTunnelAuthTokenSecret
    - TunnelInstructionQueue
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-LaunchTemplate'
      LaunchTemplateData:
        BlockDeviceMappings:
        - Ebs:
            VolumeSize: 8
            VolumeType: 'gp2'
            DeleteOnTermination: True
            Encrypted: True
          DeviceName: '/dev/sda1'
        ImageId: !Ref CumulusTunnelAmiIdParam
        InstanceType: 't4g.nano'
        IamInstanceProfile: 
          Arn: !GetAtt CumulusTunnelProfile.Arn
        SecurityGroupIds:
        - !Ref TunnelInstanceSecurityGroup
        - !Ref CumulusTunnelSsmSecurityGroup
        MetadataOptions:
          HttpTokens: 'required'
        UserData: 
          Fn::Base64: 
            Fn::Sub:
            - |
              MIME-Version: 1.0
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="

              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"

              #!/bin/bash

              apt update && apt install -y unzip
              curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

              echo "CumulusTunnelAuthTokenSecretArn: ${CumulusTunnelAuthTokenSecretArn}"
              echo "ArtifactBucket: ${ArtifactBucket}"

              export HTTP_PW_SECRET_ARN=${CumulusTunnelAuthTokenSecretArn}
              export ARTIFACT_BUCKET_NAME=${ArtifactBucket}
              export SQS_URL=${SqsUrlValue}
              export STATE_BUCKET=${StateBucketValue}
              export STATE_FILE_KEY=${StateFileValue}
              
              echo
              echo "Main setup script location      : s3://${ArtifactBucket}/cumulus-tunnel-setup.sh"
              echo "Secondary setup script location : s3://${ArtifactBucket}/additional-setup.sh"
              echo "SQS Url                         : $SQS_URL"
              echo "State File                      : s3://$STATE_BUCKET/$STATE_FILE_KEY"
              echo

              aws s3 cp s3://${ArtifactBucket}/cumulus-tunnel-setup.sh /tmp/cumulus-tunnel-setup.sh || true
              aws s3 cp s3://${ArtifactBucket}/additional-setup.sh /tmp/additional-setup.sh || true

              chmod 700 /tmp/cumulus-tunnel-setup.sh || true
              chmod 700 /tmp/additional-setup.sh || true

              /tmp/cumulus-tunnel-setup.sh || true
              /tmp/additional-setup.sh || true
              --==BOUNDARY==--
            - CumulusTunnelAuthTokenSecretArn: !Ref CumulusTunnelAuthTokenSecret
              ArtifactBucket: !Ref ArtifactBucketNameParam
              SqsUrlValue: !Ref TunnelInstructionQueue
              StateBucketValue: !Ref CumulusTunnelBucketNameParam
              StateFileValue: !Ref StateFileKeyParam

#######################################################################################################################
###
###     OUTPUTS
###
#######################################################################################################################

Outputs:

  CumulusTunnelBucketName:
    Description: 'Name of CumulusTunnelBucket'
    Value: !Ref CumulusTunnelBucketNameParam
    Export:
      Name: CumulusTunnelBucketName

  CumulusTunnelBucketArn:
    Description: 'ARN of CumulusTunnelBucket'
    Value: !GetAtt CumulusTunnelBucket.Arn
    Export:
      Name: CumulusTunnelBucketArn

  CumulusTunnelBucketPolicyArn:
    Value: !Ref CumulusTunnelBucketPolicy
    Export:
      Name: 'CumulusTunnelBucketPolicyArn'

  
