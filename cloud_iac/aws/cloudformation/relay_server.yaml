---
AWSTemplateFormatVersion: '2010-09-09'

Description: "IaC for https://github.com/nicc777/home-tunnel-via-csp"

#######################################################################################################################
###
###     PARAMETERS
###
#######################################################################################################################

Parameters:

  ArtifactBucketNameParam:
    Type: 'String'
    MinLength: 1

  VpcId1Param:
    Type: 'String'
    MinLength: 1

  VpcCidrParam:
    Type: 'String'
    MinLength: 1

  SubnetId1Param:
    Type: 'String'
    MinLength: 1

  SubnetId2Param:
    Type: 'String'
    MinLength: 1

  SubnetId3Param:
    Type: 'String'
    MinLength: 1

  DebugParam:
    Type: 'String'
    Default: "0"
    Description: "To enable DEBUG logging for AWS Lambda function, set this value to 1"

  CumulusTunnelAmiIdParam:
    Type: 'String'
    MinLength: 1
    Description: "The AMI to use."

  DefaultRoute53ZoneIdParam:
    Type: 'String'
    MinLength: 1
    Description: "The default Route 53 Zone ID for DNS records. Will also be used for the management UI record"

  DefaultRoute53DomainParam:
    Type: 'String'
    MinLength: 1
    Description: "The default domain"

  ManagementDomainRecordParam:
    Type: 'String'
    MinLength: 1
    Description: "The default management sub-domain for the management UI"
    Default: "cumulus-tunnel-admin"

  DomainCertificateArnParam:
    Type: 'String'
    MinLength: 1
    Description: "ACM Certificate for the default domain"

  Ec2InstanceTypeParam:
    Type: 'String'
    MinLength: 1
    Description: "The ARM based instance type"
    Default: 't4g.nano'

  RelayServerTtlHoursParam:
    Type: 'String'
    MinLength: 1
    Description: 'The time in hours for the relay server to remain active. Try to keep this a low number (less than 168 or 1 week)'
    Default: '12'


#######################################################################################################################
###
###     RESOURCES
###
#######################################################################################################################

Resources:

  ########################################
  ###
  ### SECURITY GROUP (FIREWALL)
  ###
  ########################################

  RelayServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the EC2 Instance hosting the tunnels
      VpcId: !Ref VpcId1Param
      GroupName: !Sub '${AWS::StackName}-relay-server-sg'

  RelayServerSgIpv4Port2022Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: "0.0.0.0/0"
      IpProtocol: tcp
      FromPort: 2022
      ToPort: 2022
      GroupId: !GetAtt RelayServerSecurityGroup.GroupId

  RelayServerSgIpv6Port2022Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIpv6: "::/0"
      IpProtocol: tcp
      FromPort: 2022
      ToPort: 2022
      GroupId: !GetAtt RelayServerSecurityGroup.GroupId

  RelayServerSgIpv4Port80Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        Fn::GetAtt:
          - RelayServerAlbSecurityGroup
          - GroupId
      GroupId: !GetAtt RelayServerSecurityGroup.GroupId

  RelayServerSgIpv4Port8081Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 8081
      ToPort: 8081
      SourceSecurityGroupId:
        Fn::GetAtt:
          - RelayServerAlbSecurityGroup
          - GroupId
      GroupId: !GetAtt RelayServerSecurityGroup.GroupId

  RelayServerSgIpv4Egress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt RelayServerSecurityGroup.GroupId
      IpProtocol: "-1"

  RelayServerSgIpv6Egress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIpv6: "::/0"
      GroupId: !GetAtt RelayServerSecurityGroup.GroupId
      IpProtocol: "-1"

  ########################################
  ###
  ### SECURITY GROUP (FIREWALL) ALB
  ###
  ########################################

  RelayServerAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the EC2 Instance hosting the tunnels
      VpcId: !Ref VpcId1Param
      GroupName: !Sub '${AWS::StackName}-alb-sg'

  RelayServerAlbSgIpv4Egress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt RelayServerAlbSecurityGroup.GroupId
      IpProtocol: "-1"

  RelayServerAlbSgIpv6Egress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIpv6: "::/0"
      GroupId: !GetAtt RelayServerAlbSecurityGroup.GroupId
      IpProtocol: "-1"


  ########################################
  ###
  ### EC2 TUNNEL INSTANCE LAUNCH TEMPLATE
  ###
  ########################################

  RelayServerRole1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
      - !ImportValue CumulusTunnelSsmPolicyArn
      Policies:
      - PolicyName: !Sub '${ManagementDomainRecordParam}-policy-1'
        PolicyDocument:
          Version: '2012-10-17'
          Statement: 
          - Action: 
            - 'secretsmanager:GetSecretValue'
            - 'secretsmanager:DescribeSecret'
            Effect: 'Allow'
            Resource: !ImportValue  CumulusTunnelAuthTokenSecretArn
      - PolicyName: !Sub '${ManagementDomainRecordParam}-policy-2'
        PolicyDocument:
          Version: '2012-10-17'
          Statement: 
          - Action: 
            - 's3:HeadObject'
            - 's3:GetObject'
            - 's3:ListObjectsV2'
            - 's3:CopyObject'
            Effect: 'Allow'
            Resource: 
              Fn::Sub: 
              - 'arn:aws:s3:::${Bucket}/*'
              - Bucket: !Ref ArtifactBucketNameParam
      - PolicyName: !Sub '${ManagementDomainRecordParam}-policy-3'
        PolicyDocument:
          Version: '2012-10-17'
          Statement: 
          - Action: 
            - 'dynamodb:PutItem'
            Effect: 'Allow'
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/cumulus-tunnel'
      Path: /
      RoleName: !Sub '${ManagementDomainRecordParam}-RelayServerRole1'

  RelayServerProfile: 
    Type: 'AWS::IAM::InstanceProfile'
    Properties: 
      Path: '/'
      Roles: 
      - Ref: RelayServerRole1

  RelayServerLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-LaunchTemplate'
      LaunchTemplateData:
        BlockDeviceMappings:
        - Ebs:
            VolumeSize: 8
            VolumeType: 'gp2'
            DeleteOnTermination: True
            Encrypted: True
          DeviceName: '/dev/sda1'
        ImageId: !Ref CumulusTunnelAmiIdParam
        InstanceType: !Ref Ec2InstanceTypeParam
        IamInstanceProfile: 
          Arn: !GetAtt RelayServerProfile.Arn
        SecurityGroupIds:
        - !Ref RelayServerSecurityGroup
        - !ImportValue CumulusTunnelSsmSecurityGroupId
        MetadataOptions:
          HttpTokens: 'required'
        UserData: 
          Fn::Base64: 
            Fn::Sub:
            - |
              MIME-Version: 1.0
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="

              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"

              #!/bin/bash

              echo "########################################"
              echo "###                                  ###"
              echo "###     CLOUD INIT SETUP START       ###"
              echo "###                                  ###"
              echo "########################################"

              apt update && apt install -y unzip
              curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

              export HTTP_PW_SECRET_ARN=${SecretArn}
              export ARTIFACT_BUCKET_NAME=${ArtifactBucket}
              export STACK_NAME=${StackName}
              export SERVER_TTL=${ServerTtl}
              
              echo
              echo "Main setup script location      : s3://${ArtifactBucket}/cumulus-tunnel-setup.sh"
              echo "Secondary setup script location : s3://${ArtifactBucket}/additional-setup.sh"
              echo

              aws s3 cp s3://${ArtifactBucket}/cumulus-tunnel-setup.sh /tmp/cumulus-tunnel-setup.sh || true
              aws s3 cp s3://${ArtifactBucket}/additional-setup.sh /tmp/additional-setup.sh || true

              chmod 700 /tmp/cumulus-tunnel-setup.sh || true
              chmod 700 /tmp/additional-setup.sh || true

              /tmp/cumulus-tunnel-setup.sh || true
              /tmp/additional-setup.sh || true

              echo "########################################"
              echo "###                                  ###"
              echo "###      CLOUD INIT SETUP DONE       ###"
              echo "###                                  ###"
              echo "########################################"
              --==BOUNDARY==--
            - SecretArn: !ImportValue  CumulusTunnelAuthTokenSecretArn
              ArtifactBucket: !Ref ArtifactBucketNameParam
              StackName: !Ref AWS::StackName
              ServerTtl: !Ref RelayServerTtlHoursParam

# TODO - Create exports for all references 
# TODO - Create unique DNS records for the admin server.

  ########################################
  ###
  ### EC2 AUTOSCALING GROUP & ALB 4 HTTP
  ###
  ########################################

  RelayServerAutoscalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties: 
      AutoScalingGroupName: !Sub '${AWS::StackName}-AutoScalingGroup'
      LaunchTemplate: 
        LaunchTemplateId: !Ref RelayServerLaunchTemplate
        Version: !GetAtt RelayServerLaunchTemplate.DefaultVersionNumber
      DesiredCapacity: '1'
      MinSize: '1'
      MaxSize: '1'
      VPCZoneIdentifier:
      - !Ref SubnetId1Param
      - !Ref SubnetId2Param
      - !Ref SubnetId3Param
      Tags:
      - Key: 'Name'
        Value: 'cumulus-tunnel'
        PropagateAtLaunch: true
      TargetGroupARNs:
      - !Ref RelayServerHttpTargetGroup
      - !Ref RelayServerAdminTargetGroup

  RelayServerHttpTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${ManagementDomainRecordParam}-http-tg'
      TargetType: 'instance'
      IpAddressType: 'ipv4'
      Protocol: 'HTTP'
      Port: 80
      VpcId: !Ref VpcId1Param
      HealthCheckEnabled: True
      HealthCheckProtocol: 'HTTP'
      HealthCheckPort: 80
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 300
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      UnhealthyThresholdCount: 3

  RelayServerAdminTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${ManagementDomainRecordParam}-admin-tg'
      TargetType: 'instance'
      IpAddressType: 'ipv4'
      Protocol: 'HTTP'
      Port: 8081
      VpcId: !Ref VpcId1Param
      HealthCheckEnabled: True
      HealthCheckProtocol: 'HTTP'
      HealthCheckPort: 8081
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 300
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      UnhealthyThresholdCount: 3

  RelayServerAlb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${ManagementDomainRecordParam}-alb'
      Type: 'application'
      Scheme: 'internal'
      IpAddressType: 'ipv4'
      SecurityGroups:
      - !Ref RelayServerAlbSecurityGroup
      Subnets:
      - !Ref SubnetId1Param
      - !Ref SubnetId2Param
      - !Ref SubnetId3Param
      LoadBalancerAttributes: 
      - Key: routing.http.drop_invalid_header_fields.enabled
        Value: true

  RelayServerListener80:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Protocol: 'HTTP'
      Port: 80
      LoadBalancerArn: !Ref RelayServerAlb
      DefaultActions:
        - Type: 'redirect'
          RedirectConfig:
            Protocol: 'HTTPS'
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"

  RelayServerListener443:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn: 
    - RelayServerHttpTargetGroup
    - RelayServerAutoscalingGroup
    Properties:
      Protocol: 'HTTPS'
      Port: 443
      LoadBalancerArn: !Ref RelayServerAlb
      SslPolicy: 'ELBSecurityPolicy-TLS-1-2-Ext-2018-06'
      Certificates:
      - CertificateArn: !Ref DomainCertificateArnParam
      DefaultActions:
      - Type: 'forward'
        ForwardConfig:
          TargetGroups:
          - TargetGroupArn: !Ref RelayServerHttpTargetGroup
            Weight: 1

  RelayServerListener8081:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn: 
    - RelayServerAutoscalingGroup
    - RelayServerAdminTargetGroup
    Properties:
      Protocol: 'HTTPS'
      Port: 8081
      LoadBalancerArn: !Ref RelayServerAlb
      SslPolicy: 'ELBSecurityPolicy-TLS-1-2-Ext-2018-06'
      Certificates:
      - CertificateArn: !Ref DomainCertificateArnParam
      DefaultActions:
      - Type: 'forward'
        ForwardConfig:
          TargetGroups:
          - TargetGroupArn: !Ref RelayServerAdminTargetGroup
            Weight: 1

  RelayServerAdminDnsRecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref DefaultRoute53ZoneIdParam
      Type: 'A'
      Name: !Sub '${ManagementDomainRecordParam}.${DefaultRoute53DomainParam}'
      AliasTarget:
        HostedZoneId: !GetAtt 'RelayServerAlb.CanonicalHostedZoneID'
        DNSName: !GetAtt 'RelayServerAlb.DNSName'


#######################################################################################################################
###
###     OUTPUTS
###
#######################################################################################################################

Outputs:

  RelayServerAutoscalingGroupName:
    Value: !Ref RelayServerAutoscalingGroup
    Export:
      Name: 'RelayServerAutoscalingGroupName'
  
